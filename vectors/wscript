#!/usr/bin/python3

from glob import glob
from pathlib import Path
from waflib.Context import Context


instruments = ['US2', 'RMI', 'RMIFace', 'RMICompass',
               'AGRShield', 'AGRBall', 'CentralPanelBackgroud', 'VBMOutline']


def configure(ctx):
    pass


def build(ctx: Context):
    # Web generation -> index.html
    sources = ctx.path.ant_glob("public/*", recursive=True)
    sources += ctx.path.ant_glob("src/*", recursive=True)
    sources += ctx.path.ant_glob("yarn.lock")
    sources += ctx.path.ant_glob("package.json")
    sources += ctx.path.ant_glob("export_svg.js")

    ctx(rule="cd ../vectors && yarn && yarn build && cp -rvf build/index.html ../build/vectors/",
        source=sources, target="index.html")
    ctx.add_group()

    ctx(rule="node ../vectors/export_svg.js vectors/index.html vectors/")
    ctx.add_group()

    sources = []
    targets = []
    for p in glob("./build/vectors/*.svg"):
        sources.append(Path(p).absolute().as_posix())
        targets.append(Path(p).name)

    for i in range(len(sources)):
        ctx(rule="inkscape -o ${TGT} -d 300 ${SRC}",
            target=f"../texture/{targets[i].split('.')[0]}.png")
